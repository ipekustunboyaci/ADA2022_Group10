version: '3.8'

services:
  api_gatway:
    image: devopsfaith/krakend:2.0.0
    container_name: api_gatway_ct
    volumes:
      - ./krakend:/etc/krakend/
    ports:
      - "8080:8081"

  # 5 services handling the Account domain, Ordering domain and Shipping domain.
  user_service:
    build: 
      context: ./user_service
    container_name: user_service_ct
    depends_on:
      - user_db
#    volumes:
#      - ./user_service/:/app/
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user_db_username:user_db_password@user_db/user_db_dev
    command: [ "uvicorn", "app.users:app", "--host", "0.0.0.0", "--port", "8000" ]

  courier-service: #Flask implementation running on store database
    build:
      context: ./courierservice
    container_name: courier_service_ct
    depends_on:
      - database
    restart: "on-failure: 5"
    ports:
      - "5003:5000"
    environment:
      - DB_URL=mysql+pymysql://root:@database/courier
      - DB_LOG=False
    command: [ "python3", "app.py" ]

  delivery-service: #Flask implementation running on delivery database
    build:
      context: ./deliveryservice
    container_name: delivery_service_ct
    depends_on:
      - database
    restart: "on-failure: 5"
    ports:
      - "5004:5000"
    environment:
      - DB_URL=mysql+pymysql://root:@database/delivery
      - DB_LOG=False
    command: [ "python3", "app.py" ]

  inventory-service: # Simple CRUD service which allows for the creation, reading, updating and deleting of inventory data
    build:
      context: ./inventory_service
    container_name: inventory_service_ct
    depends_on:
      - database
    ports:
      - "5002:80"
    environment:
      - DB_URL=mysql+pymysql://root:@database/store
      - DB_LOG=False
    command: [ "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80" ]

  order-service: # Simple CRUD service which allows for the creation, reading, updating and deleting of product data
    build:
      context: ./order_service
    container_name: order_service_ct
    depends_on:
      - database
    ports:
      - "5000:80"
    environment:
      - DB_URL=mysql+pymysql://root:@database/order
      - DB_LOG=False
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

  database:
    # we use the mysql base image, version 5.7.36
    image: mysql:5.7.36
    # we mount a datavolume to make sure we don't lose data
    volumes:
      - db_data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    # setting some env vars to create the DB
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
      
  user_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_data_user:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user_db_username
      - POSTGRES_PASSWORD=user_db_password
      - POSTGRES_DB=user_db_dev
volumes:
    db_data:
    postgres_data_user:

